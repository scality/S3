---
version: 0.2

branches:
  feature/*, documentation/*, improvement/*, bugfix/*, w/*, q/*, hotfix/*:
    stage: pre-merge
  development/*:
    stage: post-merge

models:
  - env: &global-env
      azurebackend_AZURE_STORAGE_ACCESS_KEY: >-
        %(secret:azure_storage_access_key)s
      azurebackend_AZURE_STORAGE_ACCOUNT_NAME: >-
        %(secret:azure_storage_account_name)s
      azurebackend_AZURE_STORAGE_ENDPOINT: >-
        %(secret:azure_storage_endpoint)s
      azurebackend2_AZURE_STORAGE_ACCESS_KEY: >-
        %(secret:azure_storage_access_key_2)s
      azurebackend2_AZURE_STORAGE_ACCOUNT_NAME: >-
        %(secret:azure_storage_account_name_2)s
      azurebackend2_AZURE_STORAGE_ENDPOINT: >-
        %(secret:azure_storage_endpoint_2)s
      azurebackendmismatch_AZURE_STORAGE_ACCESS_KEY: >-
        %(secret:azure_storage_access_key)s
      azurebackendmismatch_AZURE_STORAGE_ACCOUNT_NAME: >-
        %(secret:azure_storage_account_name)s
      azurebackendmismatch_AZURE_STORAGE_ENDPOINT: >-
        %(secret:azure_storage_endpoint)s
      azurenonexistcontainer_AZURE_STORAGE_ACCESS_KEY: >-
        %(secret:azure_storage_access_key)s
      azurenonexistcontainer_AZURE_STORAGE_ACCOUNT_NAME: >-
        %(secret:azure_storage_account_name)s
      azurenonexistcontainer_AZURE_STORAGE_ENDPOINT: >-
        %(secret:azure_storage_endpoint)s
      azuretest_AZURE_BLOB_ENDPOINT: "%(secret:azure_storage_endpoint)s"
      b2backend_B2_ACCOUNT_ID: "%(secret:b2backend_b2_account_id)s"
      b2backend_B2_STORAGE_ACCESS_KEY: >-
        %(secret:b2backend_b2_storage_access_key)s
      GOOGLE_SERVICE_EMAIL: "%(secret:gcp_service_email)s"
      GOOGLE_SERVICE_KEY: "%(secret:gcp_service_key)s"
      AWS_S3_BACKEND_ACCESS_KEY: "%(secret:aws_s3_backend_access_key)s"
      AWS_S3_BACKEND_SECRET_KEY: "%(secret:aws_s3_backend_secret_key)s"
      AWS_S3_BACKEND_ACCESS_KEY_2: "%(secret:aws_s3_backend_access_key_2)s"
      AWS_S3_BACKEND_SECRET_KEY_2: "%(secret:aws_s3_backend_secret_key_2)s"
      AWS_GCP_BACKEND_ACCESS_KEY: "%(secret:aws_gcp_backend_access_key)s"
      AWS_GCP_BACKEND_SECRET_KEY: "%(secret:aws_gcp_backend_secret_key)s"
      AWS_GCP_BACKEND_ACCESS_KEY_2: "%(secret:aws_gcp_backend_access_key_2)s"
      AWS_GCP_BACKEND_SECRET_KEY_2: "%(secret:aws_gcp_backend_secret_key_2)s"
      b2backend_B2_STORAGE_ENDPOINT: "%(secret:b2backend_b2_storage_endpoint)s"
      gcpbackend2_GCP_SERVICE_EMAIL: "%(secret:gcp2_service_email)s"
      gcpbackend2_GCP_SERVICE_KEY: "%(secret:gcp2_service_key)s"
      gcpbackend2_GCP_SERVICE_KEYFILE: /root/.gcp/servicekey
      gcpbackend_GCP_SERVICE_EMAIL: "%(secret:gcp_service_email)s"
      gcpbackend_GCP_SERVICE_KEY: "%(secret:gcp_service_key)s"
      gcpbackendmismatch_GCP_SERVICE_EMAIL: >-
        %(secret:gcpbackendmismatch_gcp_service_email)s
      gcpbackendmismatch_GCP_SERVICE_KEY: >-
        %(secret:gcpbackendmismatch_gcp_service_key)s
      gcpbackend_GCP_SERVICE_KEYFILE: /root/.gcp/servicekey
      gcpbackendmismatch_GCP_SERVICE_KEYFILE: /root/.gcp/servicekey
      gcpbackendnoproxy_GCP_SERVICE_KEYFILE: /root/.gcp/servicekey
      gcpbackendproxy_GCP_SERVICE_KEYFILE: /root/.gcp/servicekey
  - env: &mongo-vars
      S3BACKEND: "mem"
      MPU_TESTING: "yes"
      S3METADATA: mongodb
  - env: &multiple-backend-vars
      S3BACKEND: "mem"
      S3DATA: "multiple"
  - env: &file-mem-mpu
      S3BACKEND: "file"
      S3VAULT: "mem"
      MPU_TESTING: "yes"
  - Git: &clone
      name: Pull repo
      repourl: '%(prop:git_reference)s'
      shallow: true
      retryFetch: true
      haltOnFailure: true
  - ShellCommand: &credentials
      name: Setup Credentials
      command: bash eve/workers/build/credentials.bash
      haltOnFailure: true
      env: *global-env
  - ShellCommand: &yarn-install
      name: install modules
      command: yarn install
      haltOnFailure: true
  - Upload: &upload-artifacts
      source: /artifacts
      urls:
        - "*"
  - ShellCommand: &follow-s3-log
      logfiles:
        s3:
          filename: /artifacts/s3.log
          follow: true
  - ShellCommand: &follow-s3-ceph-logs
      logfiles:
        ceph:
          filename: /artifacts/ceph.log
          follow: true
        s3:
          filename: /artifacts/s3.log
          follow: true
  - ShellCommand: &add-hostname
      name: add hostname
      command: |
        echo "127.0.0.1 testrequestbucket.localhost" >> /etc/hosts
        echo \
        "127.0.0.1 bucketwebsitetester.s3-website-us-east-1.amazonaws.com" \
        >> /etc/hosts
      haltOnFailure: true
  - ShellCommand: &setup-junit-upload
      name: preparing junit files for upload
      command: |
        mkdir -p artifacts/junit
        find . -name "*junit*.xml" -exec cp {} artifacts/junit/ ";"
      alwaysRun: true
  - Upload: &upload-junits
      source: artifacts
      urls:
        - "*"
      alwaysRun: true

stages:
  pre-merge:
    worker:
      type: local
    steps:
      - TriggerStages:
          name: Launch all workers
          stage_names:
            - linting-coverage
            - file-ft-tests
            - multiple-backend-test
            - mongo-ft-tests
            - ceph-backend-tests
            - kmip-ft-tests
          waitForFinish: true
          haltOnFailure: true

  linting-coverage:
    worker:
      type: docker
      path: eve/workers/build
      volumes: &default_volumes
        - '/home/eve/workspace'
    steps:
      - Git: *clone
      - ShellCommand: *yarn-install
      - ShellCommand: *add-hostname
      - ShellCommand: *credentials
      - ShellCommand:
          name: Unit Coverage mandatory file
          command: |
            set -ex
            test -f .git/HEAD
      - ShellCommand:
          name: Linting
          command: |
            set -ex
            yarn run --silent lint -- --max-warnings 0
            yarn run --silent lint_md
            flake8 $(git ls-files "*.py")
            yamllint $(git ls-files "*.yml")
      - ShellCommand:
          name: Unit Coverage
          command: |
            set -ex
            unset HTTP_PROXY HTTPS_PROXY NO_PROXY
            unset http_proxy https_proxy no_proxy
            mkdir -p $CIRCLE_TEST_REPORTS/unit
            yarn test
            yarn run test_legacy_location
          env: &shared-vars
            <<: *global-env
            S3_LOCATION_FILE: tests/locationConfig/locationConfigTests.json
            CIRCLE_TEST_REPORTS: /tmp
            CIRCLE_ARTIFACTS: /tmp
            CI_REPORTS: /tmp
      - ShellCommand:
          name: Unit Coverage logs
          command: find /tmp/unit -exec cat {} \;
      - ShellCommand: *setup-junit-upload
      - Upload: *upload-junits

  multiple-backend-test:
    worker:
      type: kube_pod
      path: eve/workers/pod.yaml
      images:
        aggressor: eve/workers/build
        s3: "."
      vars:
        aggressorMem: "2560Mi"
        s3Mem: "2560Mi"
        env:
          <<: *multiple-backend-vars
          <<: *global-env
    steps:
      - Git: *clone
      - ShellCommand: *credentials
      - ShellCommand: *yarn-install
      - ShellCommand:
          command: |
            bash -c "
            source /root/.aws/exports &> /dev/null
            set -ex
            bash wait_for_local_port.bash 8000 40
            yarn run multiple_backend_test
            yarn run ft_awssdk_external_backends"
          <<: *follow-s3-log
          env:
            <<: *multiple-backend-vars
            <<: *global-env
            S3_LOCATION_FILE: tests/locationConfig/locationConfigTests.json
      - ShellCommand:
          command: mvn test
          workdir: build/tests/functional/jaws
          <<: *follow-s3-log
          env:
            <<: *multiple-backend-vars
      - ShellCommand:
          command: rspec tests.rb
          workdir: build/tests/functional/fog
          <<: *follow-s3-log
          env:
            <<: *multiple-backend-vars
      - ShellCommand: *setup-junit-upload
      - Upload: *upload-artifacts
      - Upload: *upload-junits

  ceph-backend-tests:
    worker:
      type: kube_pod
      path: eve/workers/pod.yaml
      images:
        aggressor: eve/workers/build
        s3: "."
        ceph: eve/workers/ceph
      vars:
        aggressorMem: "2500Mi"
        s3Mem: "2560Mi"
        redis: enabled
        env:
          <<: *multiple-backend-vars
          <<: *global-env
          CI_CEPH: "true"
          MPU_TESTING: "yes"
          S3_LOCATION_FILE: tests/locationConfig/locationConfigCeph.json
    steps:
      - Git: *clone
      - ShellCommand: *credentials
      - ShellCommand: *yarn-install
      - ShellCommand:
          command: |
            bash -c "
            source /root/.aws/exports &> /dev/null
            set -ex
            bash eve/workers/ceph/wait_for_ceph.sh
            bash wait_for_local_port.bash 8000 40
            yarn run multiple_backend_test"
          env:
            <<: *multiple-backend-vars
            <<: *global-env
          <<: *follow-s3-ceph-logs
      - ShellCommand:
          command: mvn test
          workdir: build/tests/functional/jaws
          <<: *follow-s3-ceph-logs
          env:
            <<: *multiple-backend-vars
      - ShellCommand:
          command: rspec tests.rb
          workdir: build/tests/functional/fog
          <<: *follow-s3-ceph-logs
          env:
            <<: *multiple-backend-vars
      - ShellCommand:
          command: |
            yarn run ft_awssdk &&
            yarn run ft_s3cmd
          env:
            <<: *file-mem-mpu
            <<: *global-env
            S3_LOCATION_FILE: "/kube_pod-prod-cloudserver-backend-0/\
              build/tests/locationConfig/locationConfigCeph.json"
          <<: *follow-s3-ceph-logs
      - ShellCommand: *setup-junit-upload
      - Upload: *upload-artifacts
      - Upload: *upload-junits

  mongo-ft-tests:
    worker: &s3-pod
      type: kube_pod
      path: eve/workers/pod.yaml
      images:
        aggressor: eve/workers/build
        s3: "."
      vars:
        aggressorMem: "2Gi"
        s3Mem: "1664Mi"
        redis: enabled
        env:
          <<: *mongo-vars
          <<: *global-env
    steps:
      - Git: *clone
      - ShellCommand: *credentials
      - ShellCommand: *yarn-install
      - ShellCommand:
          command: |
            set -ex
            bash wait_for_local_port.bash 8000 40
            yarn run ft_test
          <<: *follow-s3-log
          env:
            <<: *mongo-vars
            <<: *global-env
      - ShellCommand: *setup-junit-upload
      - Upload: *upload-artifacts
      - Upload: *upload-junits

  file-ft-tests:
    worker:
      type: kube_pod
      path: eve/workers/pod.yaml
      images:
        aggressor: eve/workers/build
        s3: "."
      vars:
        aggressorMem: "3Gi"
        s3Mem: "2560Mi"
        redis: enabled
        env:
          <<: *file-mem-mpu
          <<: *global-env
    steps:
      - Git: *clone
      - ShellCommand: *credentials
      - ShellCommand: *yarn-install
      - ShellCommand:
          command: |
            set -ex
            bash wait_for_local_port.bash 8000 40
            yarn run ft_test
          <<: *follow-s3-log
          env:
            <<: *file-mem-mpu
            <<: *global-env
      - ShellCommand: *setup-junit-upload
      - Upload: *upload-artifacts
      - Upload: *upload-junits

  kmip-ft-tests:
    worker:
      type: kube_pod
      path: eve/workers/pod.yaml
      images:
        aggressor: eve/workers/build
        s3: "."
        pykmip: eve/workers/pykmip
      vars:
        aggressorMem: "2Gi"
        s3Mem: "1664Mi"
        redis: enabled
        pykmip: enabled
        env:
          <<: *mongo-vars
          <<: *global-env
    steps:
      - Git: *clone
      - ShellCommand: *credentials
      - ShellCommand: *yarn-install
      - ShellCommand:
          command: |
            set -ex
            bash wait_for_local_port.bash 8000 40
            bash wait_for_local_port.bash 5696 40
            yarn run ft_kmip
          logfiles:
            pykmip:
              filename: /artifacts/pykmip.log
              follow: true
            s3:
              filename: /artifacts/s3.log
              follow: true
          env:
            <<: *mongo-vars
            <<: *global-env
      - ShellCommand: *setup-junit-upload
      - Upload: *upload-artifacts
      - Upload: *upload-junits

  post-merge:
    worker:
      type: kube_pod
      path: eve/workers/release/pod.yaml
      images:
        release: eve/workers/release
    steps:
      - Git: *clone
      - ShellCommand: &wait_docker_daemon
          name: Wait for Docker daemon to be ready
          command: |
            bash -c '
            for i in {1..150}
            do
              docker info &> /dev/null && exit
              sleep 2
            done
            echo "Could not reach Docker daemon from buildbot worker" >&2
            exit 1'
          haltOnFailure: true
      - ShellCommand: &docker_login
          name: Private Registry Login
          command: >
            docker login
            -u '%(secret:harbor_login)s'
            -p '%(secret:harbor_password)s'
            registry.scality.com
      - SetProperty: &registry_url
          name: registry
          property: registry_url
          value: registry.scality.com/zenko/cloudserver
      - SetProperty: &docker_tag_revision
          name: Set docker tag revision property
          property: docker_tag_revision
          value: "%(prop:registry_url)s:%(prop:commit_short_revision)s"
      - SetProperty: &docker_tag_latest
          name: Set docker tag latest property
          property: docker_tag_latest
          value: "%(prop:registry_url)s:latest-%(prop:product_version)s"
      - ShellCommand:
          name: Build docker image
          command: >-
            docker build
            --no-cache
            -t %(prop:docker_tag_revision)s
            -t %(prop:docker_tag_latest)s
            .
      - ShellCommand:
          name: Push images
          command: |
            docker push %(prop:docker_tag_revision)s
            docker push %(prop:docker_tag_latest)s
