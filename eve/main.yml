---
version: 0.2

branches:
  feature/*, improvement/*, bugfix/*, w/*, q/*, hotfix/*:
    stage: pre-merge
  development/*:
    stage: post-merge

models:
  - env: &global-env
      b2backend_B2_ACCOUNT_ID: '%(secret:b2backend_b2_account_id)s'
      b2backend_B2_STORAGE_ACCESS_KEY: >
        '%(secret:b2backend_b2_storage_access_key)s'
      b2backend_B2_STORAGE_ENDPOINT: '%(secret:b2backend_b2_storage_endpoint)s'
      gcpbackend2_GCP_SERVICE_EMAIL: '%(secret:gcp2_service_email)s'
      gcpbackend2_GCP_SERVICE_KEY: '%(secret:gcp2_service_key)s'
      gcpbackend2_GCP_SERVICE_KEYFILE: /root/.gcp/servicekey
      gcpbackend_GCP_SERVICE_EMAIL: '%(secret:gcp_service_email)s'
      gcpbackend_GCP_SERVICE_KEY: '%(secret:gcp_service_key)s'
      gcpbackendmismatch_GCP_SERVICE_EMAIL: >
        '%(secret:gcpbackendmismatch_gcp_service_email)s'
      gcpbackendmismatch_GCP_SERVICE_KEY: >
        '%(secret:gcpbackendmismatch_gcp_service_key)s'
      gcpbackend_GCP_SERVICE_KEYFILE: /root/.gcp/servicekey
      gcpbackendmismatch_GCP_SERVICE_KEYFILE: /root/.gcp/servicekey
      gcpbackendnoproxy_GCP_SERVICE_KEYFILE: /root/.gcp/servicekey
      gcpbackendproxy_GCP_SERVICE_KEYFILE: /root/.gcp/servicekey
  - env: &mongo-vars
      S3BACKEND: "mem"
      MPU_TESTING: "yes"
      S3METADATA: mongodb
  - env: &multiple-backend-vars
      S3BACKEND: "mem"
      S3DATA: "multiple"
  - env: &mem-vars
      S3BACKEND: "mem"
  - Git: &clone
      name: Pull repo
      repourl: '%(prop:git_reference)s'
      shallow: True
      retryFetch: True
      haltOnFailure: True
  - ShellCommandWthSecrets: &credentials
      name: Setup Credentials
      command: bash eve/workers/build/credentials.bash
      haltOnFailure: True
  - ShellCommandWithSecrets: &npm-install
      name: install modules
      command: npm install
      haltOnFailure: True
  - ShellCommand: &wait_for_local_port
      name: Wait for S3 to listen
      command: bash wait_for_local_port.bash 8000 40
      haltOnFailure: True
stages:
  pre-merge:
    worker:
      type: local
    steps:
      - SetProperty:
          property: artifacts_name
          value: "scality-s3-%(prop:buildnumber)s"
          haltOnFailure: True

      - TriggerStages:
          name: Launch all workers
          stage_names:
            - linting-coverage
            - multiple-backend-test
            - mongo-ft-tests
            - mem-tests
          waitForFinish: True
          haltOnFailure: True

  linting-coverage:
    worker:
      type: docker
      path: eve/workers/build
      volumes: &default_volumes
        - '/home/eve/workspace'
    steps:
      - Git: *clone
      - ShellCommand: *npm-install
      - ShellCommand:
          name: Linting
          command: |
            npm run --silent lint -- --max-warnings 0
            npm run --silent lint_md
            flake8 $(git ls-files "*.py")
            yamllint $(git ls-files "*.yml")
      - ShellCommand:
          name: Unit Coverage
          command: |
            mkdir -p $CIRCLE_TEST_REPORTS/unit
            npm run unit_coverage
            npm run unit_coverage_legacy_location
          haltOnFailure: True
          env: &shared-vars
            CIRCLE_TEST_REPORTS: /tmp
            CIRCLE_ARTIFACTS: /tmp
            CI_REPORTS: /tmp

  multiple-backend-test:
    worker:
      type: kube_pod
      path: eve/workers/pod.yaml
      images:
        aggressor: eve/workers/build
        s3: "."
      vars:
        aggressorMemLimit: "1Gi"
        s3MemLimit: "2Gi"
        env:
          <<: *multiple-backend-vars
          <<: *global-env
    steps:
      - Git: *clone
      - ShellCommandWithSecrets: *credentials
      - ShellCommand: *npm-install
      - ShellCommand: *wait_for_local_port
      - ShellCommandWithSecrets:
          command: |
            bash -c "
            source /root/.aws/exports &> /dev/null
            set -ex
            npm run multiple_backend_test"
          env:
            <<: *multiple-backend-vars
            <<: *global-env
            S3_LOCATION_FILE: tests/locationConfig/locationConfigTests.json
      - ShellCommand:
          command: mvn test
          workdir: build/tests/functional/jaws
          env:
            <<: *multiple-backend-vars
      - ShellCommand:
          command: rspec tests.rb
          workdir: build/tests/functional/fog
          env:
            <<: *multiple-backend-vars

  mongo-ft-tests:
    worker: &s3-pod
      type: kube_pod
      path: eve/workers/pod.yaml
      images:
        aggressor: eve/workers/build
        s3: "."
      vars:
        aggressorMemLimit: "2Gi"
        s3MemLimit: "1Gi"
        env:
          <<: *mongo-vars
          <<: *global-env
    steps:
      - Git: *clone
      - ShellCommandWithSecrets: *credentials
      - ShellCommand: *npm-install
      - ShellCommand: *wait_for_local_port
      - ShellCommandWithSecrets:
          command: |
            . /root/.aws/exports &> /dev/null
            npm run ft_test
          env:
            <<: *mongo-vars
            <<: *global-env

  mem-tests:
    worker:
      type: kube_pod
      path: eve/workers/pod.yaml
      images:
        aggressor: eve/workers/build
        s3: "."
    steps:
      - Git: *clone
      - ShellCommandWithSecrets: *credentials
      - ShellCommand: *npm-install
      - ShellCommand: *wait_for_local_port
      - ShellCommand:
          command: mvn test
          workdir: build/tests/functional/jaws
          env:
            <<: *mem-vars
      - ShellCommand:
          command: rspec tests.rb
          workdir: build/tests/functional/fog
          env:
            <<: *mem-vars

  post-merge:
    worker:
      type: local
    steps:
      - Git: *clone
      - ShellCommand:
          name: Nightly Build
          command: docker build -t zenko/cloudserver:nightly .
